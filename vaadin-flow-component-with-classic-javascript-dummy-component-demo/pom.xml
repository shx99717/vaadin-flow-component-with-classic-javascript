<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.shx99717</groupId>
		<artifactId>vaadin-flow-component-with-classic-javascript</artifactId>
		<version>1.0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>vaadin-flow-component-with-classic-javascript-dummy-component-demo
	</artifactId>
	<packaging>war</packaging>
	<properties>
		<failOnMissingWebXml>false</failOnMissingWebXml>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.vaadin</groupId>
			<!-- Replace artifactId with vaadin-core to use only free components -->
			<artifactId>vaadin</artifactId>
			<exclusions>
				<!-- Webjars are only needed when running in Vaadin 13 compatibility 
					mode -->
				<exclusion>
					<groupId>com.vaadin.webjar</groupId>
					<artifactId>*</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.webjars.bowergithub.insites</groupId>
					<artifactId>*</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.webjars.bowergithub.polymer</groupId>
					<artifactId>*</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.webjars.bowergithub.polymerelements</groupId>
					<artifactId>*</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.webjars.bowergithub.vaadin</groupId>
					<artifactId>*</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.webjars.bowergithub.webcomponents</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-cdi</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.platform</groupId>
			<artifactId>jakarta.jakartaee-api</artifactId>
			<version>8.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.shx99717</groupId>
			<artifactId>vaadin-flow-component-with-classic-javascript-dummy-component</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- Added to provide logging output as Flow uses -->
		<!-- the unbound SLF4J no-operation (NOP) logger implementation -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>package tomee:run</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.apache.tomee.maven</groupId>
				<artifactId>tomee-maven-plugin</artifactId>
				<!-- Apache TomEE 8.0 is certified for Jakarta EE 8 / Java EE 8 -->
				<version>8.0.6</version>
				<configuration>
					<tomeeClassifier>webprofile</tomeeClassifier>
					<context>ROOT</context>
					<synchronization>
						<extensions>
							<extension>.class</extension>
						</extensions>
					</synchronization>
					<reloadOnUpdate>true</reloadOnUpdate>
					<systemVariables>
						<openejb.system.apps>true</openejb.system.apps>
						<tomee.serialization.class.blacklist>-
						</tomee.serialization.class.blacklist>
					</systemVariables>
				</configuration>
			</plugin>

			<!-- Take care of synchronizing java dependencies and imports in package.json 
				and main.js files. It also creates webpack.config.js if not exists yet. -->
			<plugin>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-maven-plugin</artifactId>
				<version>${vaadin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-frontend</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
			<!-- 
				In order to make own-made classic javascript work with Vaadin Flow, these javascript files must
				be put under webapp folder where only exists for 'war' type of project, but the referenced component should
				be an 'jar' typed artifact, which does not exist such 'webapp' folder at, therefore we use the following way to
				copy the needed javascript files to the 'webapp' folder of the referencing project(war), by doing so, the component
				with classic javascript can still be a self-contained component
			-->
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-dummy-component</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.shx99717</groupId>
									<artifactId>vaadin-flow-component-with-classic-javascript-dummy-component</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}/dummy-component</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-as-webapp-js</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
							<overwrite>false</overwrite>
							<includeEmptyDirs>true</includeEmptyDirs>
							<resources>
								<resource>
									<directory>${project.build.directory}/dummy-component</directory>
									<filtering>false</filtering>
									<includes>
										<include>**/*.js</include>
									</includes>
									<excludes>
					    		 	     <exclude>META-INF/**</exclude>
							        </excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>